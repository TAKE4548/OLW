@startuml Class
skinparam {
   defaultfontsize 16
   linetype ortho
}
class "Window" as w {
    - root: tkRoot
    - menu: tkMenu
    - frame: tkFrame
    - time: tkLabel
    - timevar: tkStringVar
    - date: tkLabel
    - datevar: tkStringVar
    - quit_funcs: list[Function]
    + get_time_var() -> tkStringVar
    + get_date_var() -> tkStringVar
    + run()
    + close_window()
    + register_quit_func(Function)
}
class "WindowFactory" as wf {
    create() -> Window
}
wf ..> w: <<create>>

class "EventFactory" as ef {
    create(Window)
}
ef .r.> w
abstract class "EventConnector" as ec {
    - master: tkMenu
    - executer: EventExecuter
}
abstract class "EventExecuter" as ee {
    - target: tkWidget
}
ec o-r- ee
ef ..> ec: <<create>>
ef ..> ee: <<create>>

class "TitleVisibilitySwitcher" as tvs {
    - target: tkRoot
    - point_manipulator: PointManipulator
    + is_hidden() -> bool
    + hide()
    + show()
}
ee <|.. tvs

class "TitleVisibilitySwitchEvent" as tvse {
    - master: tkMenu
    - swicher: TitleVisibilitySwitcher
    - select_msg() -> str
    + event()
}
ec <|.. tvse

abstract class "PointManipulator" as pm {
    - target: tkRoot
    - get_geometry() -> Size, Point
    + get_point() -> Point
    + set_point(int, int)
    + {abstract} get_title_size() -> Size
}
class "PointManipulatorForLinux" as pml {
    + get_title_size() -> Size
}
class "PointManipulatorForWindows" as pmw {
    + get_title_size() -> Size
}
pm <|.. pml
pm <|.. pmw
tvs --> pm: <<Create>> <<Use>>

class "TopmostSwitcher" as tms {
    - target: tkRoot
    + is_topmost() -> bool
    + keep()
    + release()
}
ee <|.. tms

class "TopmostSwitchEvent" as tmse {
    - master: tkMenu
    - swicher: TopmostSwitcher
    - select_msg() -> str
    + event()
}
ec <|.. tmse

abstract class "WatchObserver" as wo {
    - target: tkStringVar
    - last_time: datetime
    + update(datetime)
}
ee <|---- wo

class "TimeObserver" as to {
    + update(datetime)
}
class "DateObserver" as do {
    + update(datetime)
}
wo <|.. to
wo <|.. do

abstract class "WatchCounter" as wc {
    - observers: list[WatchObsever]
    + add_observer(WatchObserver)
    # notify_observer(datetime)
    # {abstract} count()
    + quit()
}
class "TimeCounter" as tc {
    - count()
}
wc <|.. tc
wo "2..n" -l-o wc
@enduml
