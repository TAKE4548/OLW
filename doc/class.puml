@startuml Class
skinparam {
   defaultfontsize 16
   linetype ortho
}
left to right direction

together {
    class "Window" as w {
        - root: tkRoot
        - menu: tkMenu
        - frame: tkFrame
        - time: tkLabel
        - timevar: tkStringVar
        - date: tkLabel
        - datevar: tkStringVar
        + {static} create() -> Window
        + get_time_var() -> tkStringVar
        + get_date_var() -> tkStringVar
        + run()
    }
}

together {
    class "EventFactory" as ef {
        create(Window)
    }
    w <.. ef

    abstract class "EventExecuter" as ee {
        # target: tkWidget
    }

    abstract class "EventConnector" as ec {
        # master: tkMenu
        # executer: EventExecuter
        + {abstract}{static} bind(Window, EventExecuter)
        # register_menu()
        # {abstract} select_msg() -> str
        + {abstract} event()
    }
    ef ....> ec: <<create>>
    ec o- ee
}

abstract class "PointManipulator" as pm {
    - target: tkRoot
    - get_geometry() -> Size, Point
    + get_point() -> Point
    + set_point(int, int)
}

together {
    class "WindowCloser" as wcr {
        # target: tkRoot
        - quit_funcs: list[Callable]
        + register_quit_func(Callable)
        + on_closing()
    }
    ee <|.. wcr

    class "WindowCloseEvent" as wcre {
        # executer: WindowCloser
        + {static} bind(Window)
        # select_msg() -> str
        + event()
    }
    ec <|.. wcre
}

together {
    class "TopmostSwitcher" as tms {
        # target: tkRoot
        - status:bool
        - switch(bool)
        + is_topmost() -> bool
        + keep()
        + release()
    }
    ee <|.. tms

    class "TopmostSwitchEvent" as tmse {
        # executer: TopmostSwitcher
        + {static} bind(Window)
        # select_msg() -> str
        + event()
    }
    ec <|.. tmse
}

together {
    abstract class "WatchObserver" as wo {
        # target: tkStringVar
        # last_time: datetime
        + {abstract} update(datetime)
    }
    ee <|-- wo

    class "TimeObserver" as to {
        + update(datetime)
    }
    wo <|.. to

    class "DateObserver" as do {
        + update(datetime)
    }
    wo <|.. do

    abstract class "WatchCounter" as wc {
        - observers: list[WatchObsever]
        - thread: Thread
        # quit_loop: bool
        # notify_observer(datetime)
        # {abstract} count()
        + add_observer(WatchObserver)
        + quit()
    }

    class "TimeCounter" as tc {
        # count()
    }
    wc <|.. tc
    wo "2..n" -l-o wc
}
@enduml
